main loop

clean up creep memory
some definition of rooms - purpose/stage for each

    foreach room
        figure out stage it's in
        figure out if it should be doing anything for a differnt room
            like if another room is under attack, send a soldier
            or if another room is starting out, send basic workers
        runCreeps
        runTowers
        spawnCreeps
        report

runCreeps  DONE
    parameters: role, function to run
    foreach role, find all creeps with that role and have them run that function (duh

spawnCreeps
    parameters: role, stage?, energy available, energycapacity?, (currently # of existing creeps with that role),
        currently structure of creep to spawn, but probably want to pull that into a creepBuilder function

    maybe proiritize by setting a flag when you find a creep you need to build and having that be the while condition
    restart logic
        if no haulers and there is energy in storage, or containers, spawn a hauler
        if no harvesters and there is no energy in storage or containers, spawn a harvester (real restart)
        no builders or healers until harvesters/haulers back up and running 
        no upgrader needed until it gets to maybe 1/2 TTL
    WORK 100
    MOVE 50
    CARRY 50
    basic creep is WORK, CARRY, MOVE = 200 
    haulers are mostly move, which is relatively cheap
    harvesters are mostly work, which is expensive
    workers are mix of work and carry, move less important as long as there are roads
    so stage 2 worker is WORK WORK CARRY CARRY MOVE = 350
    stage 2 harvester is WORK WORK WORK CARRY MOVE = 400
    stage 2 hauler is CARRY CARRY CARRY MOVE MOVE = 400
    in general, spawn creeps of about 1/2 of total energy capacity
    minimum set at start stage is harvester, upgrader, builder 
    minimum set at second stage is harvester, upgrader, hauler?
    parts is an array so start with basic layout then push parts onto the array

renew
    at TTL = something, have it spawn a copy of itself
    use spawnRoom to get the Spawn
        or find closest?
    process the .body object to figure out what to spawn
    for now just use a switch statement and the role?
    then check if it can spawn the creep, if so do it
    if the creep gets killed early, this will never run - normal room spawner logic will handle that
    if (creep.memory.spawn && (creep.timeToLive < 100))
        { spawn.spawnCreep(body, spawn.name + '-' + Game.time, {memory: {role:'dismantle',targetRoom:creep.memory.targetRoom},dryRun:true})

common creep methods
    working vs gathering - check if working, flip back and forth when full or when empty
        genericize as working vs not working?
        harvester: working = harvesting, not working = depositing in SINK
        hauler: working = hauling, not working = depositing in SINK
        upgrader: working = upgrading, not working = picking up from containers/links or sources
        builder: working = buiding, not working = same as upgrader
        healer: working = healing, not working = same as upgrader/builder

    work towards goal
        if you have a target go to it, else
        find targets (build an array)
        select closest target and store it
        act on it, or move to it
    gather resources
        find sources (build an array)
            find SINKs
            find all storage/containers/links
            maybe one method with arguments, e.g.
                creep.energysource(all) or creep.energysource(sinks)
                creep.findallsources creep.findallsinks
            returns an array of the sources, or should it return the closest one?
            
        select closest target
        act on it or move to it
    generic creepRunner does things like:
        check if spawning, if so just wait
        if memory.target and not in range of target, moveTo target (is range always 1? not for workers)
        right now only harvesters and haulers have targets! do the others need them?
        if no target
            if not working
                have I hit condition to flip (maybe express this as creep.readyToWork)
                if yes, flip, find a target, move to it
                if no, continue with whatever notWorking is (deposit or picking up)
            if working
                have I hit conditino to flip (creep.doneWorking)
                if yes, flip, find a target, move to it
                if no, continue with whatever Working is
        so some new creep methods
            creep.memory.working is generic for all the working roles
            creep.hasTarget is just checking if memory.target != null
            creep.inRange(target, action) - based on action are we in appropriate range?
                action = harvest, upgrade, heal, build, deposit
            creep.moveToTarget which is just moveTo but stops when within whatever appropriate range is
            where do I check if the target is no longer appropriate?
                need a new creep.validTarget method which does that check based on role and working
            maybe creep.isWorking which is just checking if memory.working == true
            creep.readyToWork which checks for boundary conditions (e.g. carry full)
            creep.findTarget which returns an appropriate target based on room condition and role
            creep.work which runs the right working role - creep.work(action) ? or read role from memory?
            creep.notWork which runs the right other role (this is a lame name - storing? warehousing? refilling?)
            creep.readyToNotWOrk (doneWorking) (readyToRefill)
        which is simplest role to start with? healer?
            healer logic is only compolicated on finding sources
                looks for containers with energy > 200
                and links with energy > 0
                if none of those, adds sources
                then goes to target and either harvests or withdraws
                so findTargets for healers will return an array 
                    either containers with energy > 200 + links with energy > 0
                    OR sources in room
        so findTargets is a big switch statement?
            based on the role, run the logic and return the right array?

Room selection logic
    creeps have different kind of room targets
        spawnRoom = where they spawned
        targetRoom = where they should go to
        workRoom = where they should do their 'work' task
        baseRoom = where they should go when done with their 'work' task (haulers haul here)
        to add:
        recycleRoom?
        renewRoom? (for boosted creeps)

spawns for harvesting a room - mostly DONE
    need caltrans, harvesters, and interhaulers
    for each room
        arguments - roles: caltrans, harvesters, interhaulers ; room
        do we have eyes? if not spawn a scout and send there
        how many caltrans, harvesters, interhaulers do we have with target of that room?
            caltrans is really just a healer with a target of roomToMaintain
        if we are below target, start a counter if there isn't one already
        decrement counter every tick
        when counter == 0 spawn the creep, on success remove the counter
            targetRoom = the harvest room
            for interhaulers, baseRoom is from args? or calculated from rooms needing assitance?
    stil TODO
        fix interhauler logic to use baseROom and workRoom - DONE
        make it iterate over an array of room pairs (help/harvest)
        have it spawn intelligently - select nearby rooms with a surplus and use them
        add a defender that just sits in the room to handle invaders (10xTOUGH,10xATTACK,10xMOVE) - DONE

    
kinds of Creeps 
    harvesters - small MOVE, small CARRY, lots of WORK
        methods
            find source to work on
            move to that source
            harvest and deposit in your nearby container
            if no nearby non-empty container, take to nearest spawn/extension/container
    haulers - no WORK, lots of CARRY, some MOVE
        methods
            find targets
                SPAWNS
                EXTENSIONS
                TOWERS
                CONTAINERS
                STORAGE
            pick the right target out of that list (closest, priorities)
            go to that target
            when there, deposit all your stuff
    warriors - TOUGH, ATTACK, some MOVE
    workers - WORK, CARRY, and MOVE
        combination of builder, upgrader, and healer
    interroom - MOVE, WORK, CARRY?
        go to other rooms, and 1) claim, 2) harvest resources and bring them back

assigning SOURCEs to harvesters
    each room map has an array of sources
    harvester should get assigned one when created, in same code that does spawns
    done by memory.target (also used by haulers) - except will not get erased ever
    so when spawned, want to go through the array and find out how many creeps already have that source
    so logic is something like 
        how many sources?
        foreach source
            how many harvesters have that source as a target
        pick the source with the least harvesters pointed at it

    this worked for returning a count of 'true' for that target
     JSON.stringify(_.countBy(Game.creeps, function(c) { return c.memory.target == '5982fcceb097071b4adbe20c'}) )
    this worked to filter out the creeps with that target = returns an arry so can use .length
     JSON.stringify(_.filter(Game.creeps, function(c) { return c.memory.target == '5982fcceb097071b4adbe20c'}),null,4 )

    sourceToTarget = sourceCandidates[0];
    var harvsonsource = [] ;
    for(i=0; i < sourceCandidates.length ; i++) {
        var harvsOnSource[i] = _.filter(Game.creeps, function(c) { return (c.memory.role == 'harvester' && c.memory.target == sourceToTarget)})
    }
    sourceToTarget = _.maxBy(sourceCandidates, 'harvsOnSource')
    console.log(creep.name + ' targeting source ' + sourceToTarget)

designating SINKs and SOURCEs
    extend SOURCE object to have new property with value of SOURCE or SINK
    or no, create a new map of the room object that lists all containers and says which is a SOURCE or SINK
    roomMaps [ room: roomID, map: mapRoom ]
    mapRoom { containers: [containerarray]}
    mapRoom { containers:  [ { id: 599db1672988077e7d51b7cd, role: 'SOURCE'} ]}
    so like the map would haev an array of containers
        [ container1 container2 container3]
        [ { id: 599db1672988077e7d51b7cd, role: 'SOURCE'} ]
    and each container has 
        { id: objectid, role: SOURCE or SINK, }
        { id: 599db1672988077e7d51b7cd, role: 'SOURCE'}
    so the code for seeing which it is is like this, assuming only one SOURCE container
        containers=mapRoom.containers
        for(c in containers)
            container=getObjectById(c)
            if(container.role == SOURCE)
            target = container
    or maybe these are methods?
        container.isSink
        container.isSource
        actually for now want to keep it as roles so we can pull out the ARRY of sources and then go to the
            right one (fullest, or closest)
        changed my midn on that so that I can have one container act as BOTH in weird cases (like when you only have one container)
hauler behavior
    need to label containers as either SOURCE containers or SINK containers
    haulers pull from SOURCE and put into SINK, except in exceptional conditions (attack, restart, empty SOURCE)
    so hauler behavior is basically
        am I hauling?
            if YES, find a target (spawn/extension/tower, if those full then a SINK container or storage)
                move to target and drop your stuff there, then turn off hauling
            if NO, find a source (SOURCE container that's non-empty), 
                move to it and harvest from it, then turn on hauling
            GENERAL: find target, move to target, do your action, flip state
            
building roads
    find paths with
        PathFinder.search(Game.spawns['Spawn1'].pos,{pos: Game.rooms['sim'].find(FIND_SOURCES)[0].pos, range:1}).path
    that returns an array of positions
    walk that array and create construction sites for roads
    so like
        roads = that pathfinder search
        for r in roads
            room.createConstructionSite(r.pos, STRUCTURE_ROAD)
        that's wrong, it's for(i=0;i<path.length;i++)
            room.createConstructionSite(roads[i].pos, STRUCTURE_ROAD)
    for(r in (PathFinder.search(Game.spawns['Spawn1'].pos,{pos: Game.rooms['sim'].find(FIND_SOURCES)[0].pos, range:1}).path)) { Game.rooms['sim'].createConstructionSite(r, STRUCTURE_ROAD)}))

    test wihtout for (for doesn't work)

    Game.rooms['sim'].createConstructionSite(PathFinder.search(Game.spawns['Spawn1'].pos,{pos: Game.rooms['sim'].find(FIND_SOURCES)[0].pos, range:1}).path[0], STRUCTURE_ROAD)
    above works to create the first location of that road, so should be able to walk the array to create them all
    walking it manually like this
        Game.rooms['sim'].createConstructionSite(PathFinder.search(Game.spawns['Spawn1'].pos,{pos: Game.rooms['sim'].find(FIND_SOURCES)[3].pos, range:1}).path[22], STRUCTURE_ROAD)

linkers
    need to put energy in each link, then just transfer to the other link
    so I'll designate links as SOURCE and SINK
    haulers deposit in SOURCE, and builders etc pull from SINK

mineral haulers
    find all containers with non-energy resources DONE
    go grab them, bring them to terminal done
        if in same room with terminal great DONE
        if not, go to room with terminal WIP
    should have these guys on recycle behavior so they don't drop vauable stuff DONE
    if current room has no targets, check next room

interhaulers
    need to have a target room and a dropoff room
    if not hauling and not in target room, move to target room
    if hauling and not in dropoff room, move to dropoff room
    otherwise, just be a hauler - will pick up from SOURCE in target room and drop in SINK in dropoff room

remote workers
    on spawn, go to room to help
    once there determine what to do
        if room is owned by me and RCL < 1 or TTL on controller < 150, become an upgrader
        if construction sites, build them
        if no container per source, build a container
        if container but no harvester, become a harvester
        if harvester
            if build sites, become a builder
            else become a healer
    when about to die, call for a new remoteworker spawn frmo room with most energy
    so when room is "done", one creep is a harvester, one is a healer

caltrans
    maintain roads/containers in a room
    go to room, run healer code
    redundant with remoteworker?

market
    to get BUY orders for CATALYST over 0.9 cr
     Game.market.getAllOrders(o => o.type == ORDER_BUY && o.resourceType == RESOURCE_CATALYST && o.price > 0.9)

spawning maintainer creeps
    don't want to lose all energy in my main rooms sending creeps to their death
    so if there are no caltrans or remoteworker creeps (and if Memory.roomToBuild/Maintain is set)
    then set a timer in Memory.ticksToSpawnCaltrans for 500 
    every tick, --
    when it == 0, set it to null, then spawn a creep (check to see if not spawning before null?)

building roomMaps automatically
    object is { room.name: {containers: [ {id: , role: , isSource/isSink}]
                            links: []}}
    want to generate object, then store it in memory
    so code is like
    on first get
        create object (room, containers, links)
        find all containers and links (and storages) and sources 
        containers within 2 spaces of sources mark as SOURCE
        others mark as SINKs
    subsequent gets, just return the data from Memory
    will be referred to like:
        roomMap[room.name].sources = array of sources (objectIDs) in the room
    so when I have that in the code, I need a function that returns that array, like
    function (room) {
        return room.find(FIND_SOURCES);
    }
    but that still runs it every time it's called, so need to cache it the first time like
    function (room) {
        if (!room._sources) {
            room._sources = room.find(FIND_SOURCES);
        }
        return room._sources;
    }
    the screeps API examples have this as a method on the room object - should I do that too?
        I was thiniking tht would make it hard to store SOURCE flags etc, but no...
        those can just be additional properties that get set on setting
        so yeah I should do that
    things to cache
        containers
            storage already exists as Room.storage 
        links
        sources
        structures? (used by healers for example)
            often only one healer in a room, and it runs that find once, and it's important what the current hits is
        minerals
        controller  NO - not ever found via find(), it's part of the room object already
        towers
        spawns?
    how to handle when containers etc go away?   

telling creeps to move
    add creep method to move in a random direction - done
    find the creep to tell to move
        when you get back ERR_NO_PATH
        do the same find again, with the option to ignore creeps
        walk that path until you find a loc that has a creep on it

        tell that creep to move!

minerals and labs
    have new creep (heisenberg?) that handles all lab stuff
    select 3 labs - 2 as reactant one as product
    start with utrium oxide
    fill reactant 1 with energy and utrium
    fill reactant 2 with energy and oxide
    run reactions

getting minerals to labs with contracthaulers
    group labs into 3s (labGroup)
    [ reactant1, reactant2, product]
    build a queue of tasks - for now queue = array
    this queue is per room - a list of contract hauler jobs per room
        resource, destination, amount
        call these HaulTasks?
        this is done by the labHandler
        may need to remove old minerals first
        new Task (energy to reactant1)
        new Task (energy to reactant2)
        new Task (utrium to reactant1)
        new Task (oxide to reactant2)
    should labHandler assign tasks to a creep? probably to handle creep loss
    basically those are conditions that need to be satisfied:
        r1 has energy? if not, bring some
        r2 has energy? if not, bring some
        r1 has minerals? inbs
        r2 has minerals? inbs
        now just run the reactions and minerals will show up in product, and then you can boost creeps
    state machine for labs
        initial - spawn a heisenberg creep
        clean out minerals from r1 r2 p
        for r1 r2, bring energy
        for r1 r2, bring minerals
        start reactions

    then the heisenberg creep does the following
    if creep does not have a task    
        pull task off the queue
            store destination, amount, resource in creep memory
    otherwise
        1
        find a location with the resource
        go get it
        bring it to destination
        transfer it there
        go back to 1
    when reached AMOUNT go back to start and grab new task 
    what I would do manually
    make contracthauler
        if anything in labs, have him empty them
            dropT = terminal, pullT = lab
            stop when lab is empty
        if energy in labs not full, fill them
            dropT = lab, pullT = storage 
            stop when lab is full 
            might have extra energy so need to drop that off before next phase
        fill labs with minerals
            dropT = r1, pullT = terminal, resource = U
            when lab is full
            dropT = r2, pullT = terminal, resource = O
            done when lab is full
        run reactions

creep boosting
    during init, check if appropriate boost is available, if so set needsBoost
    while needsBoost = true, 
        move to appropriate lab (set as target), 
        when there tell target to boost you, 
        then set needsBoost = false and boosted = true
        then back to regular harvesting

Market stuff
    each room has a mineral that it harvests and sells
        create an order for that mineral if it doesn't exist
        check remaining amount, if it's less than 10k, extend it by 50k or amount in terminal - 10k
        set price
            get average price of open orders for mineral (by volume, not by order - IOW don't let a bunch of single volume orders skew the average)
            set to that average - 0.1
            have a floor for each mineral you won't go below (in memory)
            so need some memory object for each mineral, like
             {mineral:'X', floor: 0.1, }

fix for blocking
    problem is that when 3-4 creeps are all stuck in teh same narrow hallway, random movement
        doesn't get them out of the pickle. manually what I do is to tell the last creep into 
        the mess to pick a different target. Generally this happens when creeps are going 
        to a fullsource.
        options are
            change fullsource code to only send the creep there if there isn't already a creep
                (or two creeps) going there
            change blocking code to keep a counter and do a target memwipe after some amount of
                being blocked
            Implemented both of these

transferring energy from one room to another
    states - is the state of a TASK or per ROOM? (so two individual tasks, one in target room one in source)
        nornmal - no extra energy
            end - when storage has > 700k energy
            room.memory.energyState = loading
        load terminal - move energy from storage to terminal
            end - when 100k energy has been transferred to terminal
            room.memory.energyState = sending
            RISK: terminal can't accept that much
            steps
                spawn contracthauler
                wait for CH to move the energy
                recycle CH
            need to link this CH to this task
            maybe a task queue in the room?
            arry of { taskType, taskState, taskCreep}
            or could have it be part of creep memory, like loadingTerminal = true
        send energy - find a room to send it to
            end - target room has received the energy
            room.memory.energyState = targetspawning
            or at this point, targetRoom.memory.energyState=unloading
            sourceRoom.memory.energyState = normal
        unload terminal - target room moves energy from terminal to storage
            end - target room hsa transferred the energy to storage
            targetRoom.memory.energyState = normal
    as part of this, need contracthaulers to store how much they have moved
    think we do this as two different things one in each room
    first room sees the extra, spawns contracthauler, when CH is done, finds a target, sends 
        the energy, then flags the target room to start its part
    target room then spawns contracthauler to transfer the energy
        actually if this is a single call to CH (e.g. it respawns till done) then the sending room
        can do it all 
        downside to this is that we can't really verify the last step 
            